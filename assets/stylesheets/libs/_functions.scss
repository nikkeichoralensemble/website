/* reference: https://gist.github.com/3rdTheMagical/004b9bc6e30aa6d4d45b59065d30a0c0 */
@function to-number($value) {
  @if type-of($value) == "number" {
    @return $value;
  } @else if type-of($value) != "string" {
    @error 'Value for `to-number` should be a number or a string.';
  }

  $numbers: (
    "0": 0,
    "1": 1,
    "2": 2,
    "3": 3,
    "4": 4,
    "5": 5,
    "6": 6,
    "7": 7,
    "8": 8,
    "9": 9,
  );

  @return  map-get($numbers, str-slice($value, 1, 1));
  // @for $i from if($negative, 2, 1) through str-length($value) {
  //   $character: str-slice($value, $i, $i);

  //   @if (index(map-keys($numbers), $character) or $character == ".") {
  //     @if $character == "." {
  //       $digits: 1;
  //     } @else if $digits == 0 {
  //       $result: $result * 10 + map-get($numbers, $character);
  //     } @else {
  //       $digits: $digits * 10;
  //       $result: $result + map-get($numbers, $character) / $digits;
  //     }
  //   }
  // }

  // @return if($negative, -$result, $result);
}

@function to-unit($value) {
  @if type-of($value) != "string" {
    @error 'Value for `to-unit` should be a string.';
  }

  $units: (
    "px": 1px,
    "cm": 1cm,
    "mm": 1mm,
    "%": 1%,
    "ch": 1ch,
    "pc": 1pc,
    "in": 1in,
    "em": 1em,
    "rem": 1rem,
    "pt": 1pt,
    "ex": 1ex,
    "vw": 1vw,
    "vh": 1vh,
    "vmin": 1vmin,
    "vmax": 1vmax,
  );
  $parsed-unit: false;

  @each $unit in $units {
    @if (str-index($value, nth($unit, 1))) {
      $parsed-unit: nth($unit, 2);
    }
  }

  @if (not $parsed-unit) {
    @error 'Invalid unit `#{$value}`.';
  }

  @return $parsed-unit;
}

// .selector {
//   $size: "10px";

//   $number: to-number($size);
//   @debug $number;
//   $unit: to-unit($size);
//   @debug $unit;
//   @debug ($number * $unit);
//   width: ($number * $unit) / 2;
// }
